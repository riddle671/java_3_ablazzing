package homework.homework4;

import homework.homework4.task1.*;
import homework.homework4.task2.*;
import homework.homework4.task3.*;


public class Homework4 {
    public static void main(String[] args) {
        ex1();
        ex2();
        ex3();

    }

    public static void ex1() {
        //Создать легковую машину (атрибуты: чистая/грязная, размеры(ширина,высота,длина), наличие круиз контроля)
        //Создать автобус (атрибуты: чистый/грязный, размеры(ширина,высота,длина), макс количество пассажиров)
        //Создать автомойку
        //Автомойка умеет мыть машину. Делает машину чистой. Возвращает стоимость помывки.
        //Автомойка умеет мыть машины. Делает машины чистыми. Возвращает стоимость помывки за все машины.
        //Категории автомобилей:
        //если длина > 6 или высота > 2.5 метра или ширина > 2, то машина считается крупной
        //иначе считается маломерной.
        //тариф 4000 - для крупных авто.
        //тариф 2000 - для маломерных.
        //В автомойку были отправлены грязные машины мэрии: 4 легковых(длина высота ширина) (5х2х1.8),
        //5 автобусов(12х3х2.3)
        //Посчитать, сколько мэрия заплатит денег за мойку машин.

        CarWash carWash1 = new CarWash();

        Car passengeCar1 = new Passenger(false, 1.8, 2, 5, true);
        Car passengeCar2 = new Passenger(false, 1.8, 2, 5, true);
        Car passengeCar3 = new Passenger(false, 1.8, 2, 5, true);
        Car passengeCar4 = new Passenger(false, 1.8, 2, 5, true);
        Car bus1 = new Bus(false, 2.3, 3, 12, 20);
        Car bus2 = new Bus(false, 2.3, 3, 12, 20);
        Car bus3 = new Bus(false, 2.3, 3, 12, 20);
        Car bus4 = new Bus(false, 2.3, 3, 12, 20);
        Car bus5 = new Bus(false, 2.3, 3, 12, 20);
        Car[] cars = new Car[] {passengeCar1, passengeCar2, passengeCar3, passengeCar4, bus1, bus2, bus3, bus4, bus5};
        carWash1.wash(cars);
        System.out.println("Мэрия заплатит: " + carWash1.getCostWash());
    }

    public static void ex2() {
        //Задача №2
        //1. Создать два класса, которые умеют летать: самолет и утка. Атрибут утки: isInjured (ранен),
        // атрибут самолета: countPassengers.
        //2. Создать интерфейс, который объединяет эти два класса.
        //3. Имплементировать его в двух классах
        //4. Реализовать метод летать:
        // Для утки:
        // Метод летать будет выкидывать ошибку FlyException (создать такой класс), если утка подстрелена,
        // иначе печатать на экран "утка летит"
        // Для самолета:
        // Метод летать будет выкидывать ошибку FlyException, если количество пассажиров меньше нуля.
        // Иначе печать "самолет летит"
        //5. Создать 1 утку не раненую, 1 утку раненую, 1 самолет с 10 пассажирами, 1 самолет с -1 пассажиром.
        //6. Вызвать у них метод летать
        // Перехватить исключения: вывести на экран текст
        // Ожидание:
        // утка летит
        // Ошибка: утка ранена
        // самолет летит
        // Ошибка: пассажиров в самолете меньше 0

        Flyable duck1 = new Duck(false);
        Flyable duck2 = new Duck(true);
        Flyable airplene1 = new Airplene(10);
        Flyable airplene2 = new Airplene(-1);
        Flyable[] flyables = {duck1, duck2, airplene1, airplene2};
        for (Flyable flyable : flyables) {
            try {
                flyable.fly();
            } catch (Flyexeption flyexeption) {
                System.out.println(flyexeption.getMessage());

            }

        }
    }

    public static void ex3() {
        //Задача №3 - Звук вокруг
        //Человек умеет издавать звук: "Я человек." (возвращается строка и в след пунктах тоже)
        //Строитель умеет издавать звук: "Я строитель." + звук из человека
        //Водитель умеет издавать звук: "Я водитель." (имеет связь с человеком)
        //Птица умеет издавать звук: "Чирик"
        //Сделать так, чтобы они все могли быть представлены к единому типу.
        //Создать в этом методе человека, строителя, водителя и птицу. Заставить их издать звуки.
        //Изданные звуки распечатать.

        Speakable[] speakable = {new Man(), new Builder(), new Driver(), new Bird()};
        for (Speakable speaker : speakable) {
            System.out.println(speaker.speak());

        }

    }

    public static void ex4() {
        //Задача №4 (2 балла) - OneGramChat
        //Для считывания данных вам нужен new Scanner(), вызывать readLine();
        //Создать сообщение (текст, входящее/исходящее, кому/от кого)
        //Создать Пользователя(имя, пароль, список сообщений)
        //Необходимо создать класс OneGramChat, который позволяет:
        //Создать пользователя. Имя и пароль вводится из консоли. Список сообщений пустой (размерность 100).
        //
        //Войти пользователю. Ввести имя и пароль. Если есть такой пользователь,
        //он становится текущим пользователем в системе.
        //Если нет пользователя, то будет ошибка.
        //
        //Выйти пользователю, текущий пользователь становится пустым.
        //
        //Написать письмо: Вводится имя пользователя, вводится текст письма.
        //У текущего пользователя записывается в список сообщений как исходящий
        //У пользователя которому пишем, записывается в список сообщений как входящее
        //если такого пользователя нет, то возникает ошибка: такого пользователя нет
        //если текущего пользователя нет, то возникает ошибка: вы не авторизованы
        //
        //Прочитать письма:
        //Вывести все письма текущего пользователя.
        //Формат входящего: "письмо от {имя пользователя}: {текст сообщения}"
        //Формат исходящего: "письмо к {имя пользователя}: {текст сообщения}"
        //если текущего пользователя нет, то возникает ошибка: вы не авторизованы
        //
        //Функция запуска чата:
        //чат постоянно ожидает команд из консоли:
        //"войти" - запуск функции "войти пользователю"
        //"новый" - запуск функции "создать пользователя"
        //"выйти" - запуск функции "выйти пользователю"
        //"написать" - запуск функции "написать письмо"
        //"прочитать" - запуск функции "прочитать письмо"
        //"exit" - окончание работы программы
        //Ошибки в результате работы команд должны быть обработаны, и не должны заканчивать работу программы.
    }
}